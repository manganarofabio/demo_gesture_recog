# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_roypy')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_roypy')
    _roypy = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_roypy', [dirname(__file__)])
        except ImportError:
            import _roypy
            return _roypy
        try:
            _mod = imp.load_module('_roypy', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _roypy = swig_import_helper()
    del swig_import_helper
else:
    import _roypy
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

try:
    import weakref
    weakref_proxy = weakref.proxy
except __builtin__.Exception:
    weakref_proxy = lambda x: x


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _roypy.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _roypy.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _roypy.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _roypy.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _roypy.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _roypy.SwigPyIterator_equal(self, x)

    def copy(self):
        return _roypy.SwigPyIterator_copy(self)

    def next(self):
        return _roypy.SwigPyIterator_next(self)

    def __next__(self):
        return _roypy.SwigPyIterator___next__(self)

    def previous(self):
        return _roypy.SwigPyIterator_previous(self)

    def advance(self, n):
        return _roypy.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _roypy.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _roypy.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _roypy.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _roypy.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _roypy.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _roypy.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _roypy.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class StringVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _roypy.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _roypy.StringVector___nonzero__(self)

    def __bool__(self):
        return _roypy.StringVector___bool__(self)

    def __len__(self):
        return _roypy.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _roypy.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _roypy.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _roypy.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _roypy.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _roypy.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _roypy.StringVector___setitem__(self, *args)

    def pop(self):
        return _roypy.StringVector_pop(self)

    def append(self, x):
        return _roypy.StringVector_append(self, x)

    def empty(self):
        return _roypy.StringVector_empty(self)

    def size(self):
        return _roypy.StringVector_size(self)

    def swap(self, v):
        return _roypy.StringVector_swap(self, v)

    def begin(self):
        return _roypy.StringVector_begin(self)

    def end(self):
        return _roypy.StringVector_end(self)

    def rbegin(self):
        return _roypy.StringVector_rbegin(self)

    def rend(self):
        return _roypy.StringVector_rend(self)

    def clear(self):
        return _roypy.StringVector_clear(self)

    def get_allocator(self):
        return _roypy.StringVector_get_allocator(self)

    def pop_back(self):
        return _roypy.StringVector_pop_back(self)

    def erase(self, *args):
        return _roypy.StringVector_erase(self, *args)

    def __init__(self, *args):
        this = _roypy.new_StringVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _roypy.StringVector_push_back(self, x)

    def front(self):
        return _roypy.StringVector_front(self)

    def back(self):
        return _roypy.StringVector_back(self)

    def assign(self, n, x):
        return _roypy.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _roypy.StringVector_resize(self, *args)

    def insert(self, *args):
        return _roypy.StringVector_insert(self, *args)

    def reserve(self, n):
        return _roypy.StringVector_reserve(self, n)

    def capacity(self):
        return _roypy.StringVector_capacity(self)
    __swig_destroy__ = _roypy.delete_StringVector
    __del__ = lambda self: None
StringVector_swigregister = _roypy.StringVector_swigregister
StringVector_swigregister(StringVector)

class PointVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PointVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PointVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _roypy.PointVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _roypy.PointVector___nonzero__(self)

    def __bool__(self):
        return _roypy.PointVector___bool__(self)

    def __len__(self):
        return _roypy.PointVector___len__(self)

    def __getslice__(self, i, j):
        return _roypy.PointVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _roypy.PointVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _roypy.PointVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _roypy.PointVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _roypy.PointVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _roypy.PointVector___setitem__(self, *args)

    def pop(self):
        return _roypy.PointVector_pop(self)

    def append(self, x):
        return _roypy.PointVector_append(self, x)

    def empty(self):
        return _roypy.PointVector_empty(self)

    def size(self):
        return _roypy.PointVector_size(self)

    def swap(self, v):
        return _roypy.PointVector_swap(self, v)

    def begin(self):
        return _roypy.PointVector_begin(self)

    def end(self):
        return _roypy.PointVector_end(self)

    def rbegin(self):
        return _roypy.PointVector_rbegin(self)

    def rend(self):
        return _roypy.PointVector_rend(self)

    def clear(self):
        return _roypy.PointVector_clear(self)

    def get_allocator(self):
        return _roypy.PointVector_get_allocator(self)

    def pop_back(self):
        return _roypy.PointVector_pop_back(self)

    def erase(self, *args):
        return _roypy.PointVector_erase(self, *args)

    def __init__(self, *args):
        this = _roypy.new_PointVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _roypy.PointVector_push_back(self, x)

    def front(self):
        return _roypy.PointVector_front(self)

    def back(self):
        return _roypy.PointVector_back(self)

    def assign(self, n, x):
        return _roypy.PointVector_assign(self, n, x)

    def resize(self, *args):
        return _roypy.PointVector_resize(self, *args)

    def insert(self, *args):
        return _roypy.PointVector_insert(self, *args)

    def reserve(self, n):
        return _roypy.PointVector_reserve(self, n)

    def capacity(self):
        return _roypy.PointVector_capacity(self)
    __swig_destroy__ = _roypy.delete_PointVector
    __del__ = lambda self: None
PointVector_swigregister = _roypy.PointVector_swigregister
PointVector_swigregister(PointVector)

class StreamVecVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StreamVecVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StreamVecVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _roypy.StreamVecVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _roypy.StreamVecVector___nonzero__(self)

    def __bool__(self):
        return _roypy.StreamVecVector___bool__(self)

    def __len__(self):
        return _roypy.StreamVecVector___len__(self)

    def __getslice__(self, i, j):
        return _roypy.StreamVecVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _roypy.StreamVecVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _roypy.StreamVecVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _roypy.StreamVecVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _roypy.StreamVecVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _roypy.StreamVecVector___setitem__(self, *args)

    def pop(self):
        return _roypy.StreamVecVector_pop(self)

    def append(self, x):
        return _roypy.StreamVecVector_append(self, x)

    def empty(self):
        return _roypy.StreamVecVector_empty(self)

    def size(self):
        return _roypy.StreamVecVector_size(self)

    def swap(self, v):
        return _roypy.StreamVecVector_swap(self, v)

    def begin(self):
        return _roypy.StreamVecVector_begin(self)

    def end(self):
        return _roypy.StreamVecVector_end(self)

    def rbegin(self):
        return _roypy.StreamVecVector_rbegin(self)

    def rend(self):
        return _roypy.StreamVecVector_rend(self)

    def clear(self):
        return _roypy.StreamVecVector_clear(self)

    def get_allocator(self):
        return _roypy.StreamVecVector_get_allocator(self)

    def pop_back(self):
        return _roypy.StreamVecVector_pop_back(self)

    def erase(self, *args):
        return _roypy.StreamVecVector_erase(self, *args)

    def __init__(self, *args):
        this = _roypy.new_StreamVecVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _roypy.StreamVecVector_push_back(self, x)

    def front(self):
        return _roypy.StreamVecVector_front(self)

    def back(self):
        return _roypy.StreamVecVector_back(self)

    def assign(self, n, x):
        return _roypy.StreamVecVector_assign(self, n, x)

    def resize(self, *args):
        return _roypy.StreamVecVector_resize(self, *args)

    def insert(self, *args):
        return _roypy.StreamVecVector_insert(self, *args)

    def reserve(self, n):
        return _roypy.StreamVecVector_reserve(self, n)

    def capacity(self):
        return _roypy.StreamVecVector_capacity(self)
    __swig_destroy__ = _roypy.delete_StreamVecVector
    __del__ = lambda self: None
StreamVecVector_swigregister = _roypy.StreamVecVector_swigregister
StreamVecVector_swigregister(StreamVecVector)


def getVersionString ():
    a,b,c,d = getVersion()
    return str(a)+'.'+str(b)+'.'+str(c)+'.'+str(d)

class ICameraDevicePtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ICameraDevicePtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ICameraDevicePtr, name)
    __repr__ = _swig_repr

    def __deref__(self):
        return _roypy.ICameraDevicePtr___deref__(self)

    def get(self):
        return _roypy.ICameraDevicePtr_get(self)

    def __init__(self):
        this = _roypy.new_ICameraDevicePtr()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _roypy.delete_ICameraDevicePtr
    __del__ = lambda self: None

    def initialize(self, *args):
        return _roypy.ICameraDevicePtr_initialize(self, *args)

    def getId(self):
        return _roypy.ICameraDevicePtr_getId(self)

    def getCameraName(self):
        return _roypy.ICameraDevicePtr_getCameraName(self)

    def getCameraInfo(self, *args):
        return _roypy.ICameraDevicePtr_getCameraInfo(self, *args)

    def setUseCase(self, name):
        return _roypy.ICameraDevicePtr_setUseCase(self, name)

    def getUseCases(self):
        return _roypy.ICameraDevicePtr_getUseCases(self)

    def getStreams(self):
        return _roypy.ICameraDevicePtr_getStreams(self)

    def getNumberOfStreams(self, *args):
        return _roypy.ICameraDevicePtr_getNumberOfStreams(self, *args)

    def getCurrentUseCase(self):
        return _roypy.ICameraDevicePtr_getCurrentUseCase(self)

    def setExposureTime(self, *args):
        return _roypy.ICameraDevicePtr_setExposureTime(self, *args)

    def setExposureMode(self, exposureMode, streamId=0):
        return _roypy.ICameraDevicePtr_setExposureMode(self, exposureMode, streamId)

    def getExposureMode(self, streamId=0):
        return _roypy.ICameraDevicePtr_getExposureMode(self, streamId)

    def getExposureLimits(self, *args):
        return _roypy.ICameraDevicePtr_getExposureLimits(self, *args)

    def registerDataListener(self, listener):
        return _roypy.ICameraDevicePtr_registerDataListener(self, listener)

    def unregisterDataListener(self):
        return _roypy.ICameraDevicePtr_unregisterDataListener(self)

    def registerDepthImageListener(self, listener):
        return _roypy.ICameraDevicePtr_registerDepthImageListener(self, listener)

    def unregisterDepthImageListener(self):
        return _roypy.ICameraDevicePtr_unregisterDepthImageListener(self)

    def registerSparsePointCloudListener(self, listener):
        return _roypy.ICameraDevicePtr_registerSparsePointCloudListener(self, listener)

    def unregisterSparsePointCloudListener(self):
        return _roypy.ICameraDevicePtr_unregisterSparsePointCloudListener(self)

    def registerIRImageListener(self, listener):
        return _roypy.ICameraDevicePtr_registerIRImageListener(self, listener)

    def unregisterIRImageListener(self):
        return _roypy.ICameraDevicePtr_unregisterIRImageListener(self)

    def registerEventListener(self, listener):
        return _roypy.ICameraDevicePtr_registerEventListener(self, listener)

    def unregisterEventListener(self):
        return _roypy.ICameraDevicePtr_unregisterEventListener(self)

    def startCapture(self):
        return _roypy.ICameraDevicePtr_startCapture(self)

    def stopCapture(self):
        return _roypy.ICameraDevicePtr_stopCapture(self)

    def getMaxSensorWidth(self):
        return _roypy.ICameraDevicePtr_getMaxSensorWidth(self)

    def getMaxSensorHeight(self):
        return _roypy.ICameraDevicePtr_getMaxSensorHeight(self)

    def getLensParameters(self, param):
        return _roypy.ICameraDevicePtr_getLensParameters(self, param)

    def isConnected(self):
        return _roypy.ICameraDevicePtr_isConnected(self)

    def isCalibrated(self):
        return _roypy.ICameraDevicePtr_isCalibrated(self)

    def isCapturing(self):
        return _roypy.ICameraDevicePtr_isCapturing(self)

    def getAccessLevel(self):
        return _roypy.ICameraDevicePtr_getAccessLevel(self)

    def startRecording(self, fileName, numberOfFrames=0, frameSkip=0, msSkip=0):
        return _roypy.ICameraDevicePtr_startRecording(self, fileName, numberOfFrames, frameSkip, msSkip)

    def stopRecording(self):
        return _roypy.ICameraDevicePtr_stopRecording(self)

    def registerRecordListener(self, listener):
        return _roypy.ICameraDevicePtr_registerRecordListener(self, listener)

    def unregisterRecordListener(self):
        return _roypy.ICameraDevicePtr_unregisterRecordListener(self)

    def registerExposureListener(self, *args):
        return _roypy.ICameraDevicePtr_registerExposureListener(self, *args)

    def unregisterExposureListener(self):
        return _roypy.ICameraDevicePtr_unregisterExposureListener(self)

    def setFrameRate(self, framerate):
        return _roypy.ICameraDevicePtr_setFrameRate(self, framerate)

    def getFrameRate(self):
        return _roypy.ICameraDevicePtr_getFrameRate(self)

    def getMaxFrameRate(self):
        return _roypy.ICameraDevicePtr_getMaxFrameRate(self)

    def setExternalTrigger(self, useExternalTrigger):
        return _roypy.ICameraDevicePtr_setExternalTrigger(self, useExternalTrigger)

    def setFilterLevel(self, level, streamId=0):
        return _roypy.ICameraDevicePtr_setFilterLevel(self, level, streamId)

    def getFilterLevel(self, streamId=0):
        return _roypy.ICameraDevicePtr_getFilterLevel(self, streamId)

    def getExposureGroups(self):
        return _roypy.ICameraDevicePtr_getExposureGroups(self)

    def setExposureTimes(self, exposureTimes, streamId=0):
        return _roypy.ICameraDevicePtr_setExposureTimes(self, exposureTimes, streamId)

    def setExposureForGroups(self, exposureTimes):
        return _roypy.ICameraDevicePtr_setExposureForGroups(self, exposureTimes)

    def setProcessingParameters(self, parameters, streamId=0):
        return _roypy.ICameraDevicePtr_setProcessingParameters(self, parameters, streamId)

    def getProcessingParameters(self, streamId=0):
        return _roypy.ICameraDevicePtr_getProcessingParameters(self, streamId)

    def registerDataListenerExtended(self, listener):
        return _roypy.ICameraDevicePtr_registerDataListenerExtended(self, listener)

    def unregisterDataListenerExtended(self):
        return _roypy.ICameraDevicePtr_unregisterDataListenerExtended(self)

    def setCallbackData(self, *args):
        return _roypy.ICameraDevicePtr_setCallbackData(self, *args)

    def setCalibrationData(self, *args):
        return _roypy.ICameraDevicePtr_setCalibrationData(self, *args)

    def getCalibrationData(self, data):
        return _roypy.ICameraDevicePtr_getCalibrationData(self, data)

    def writeCalibrationToFlash(self):
        return _roypy.ICameraDevicePtr_writeCalibrationToFlash(self)

    def writeDataToFlash(self, *args):
        return _roypy.ICameraDevicePtr_writeDataToFlash(self, *args)

    def setDutyCycle(self, dutyCycle, index):
        return _roypy.ICameraDevicePtr_setDutyCycle(self, dutyCycle, index)

    def writeRegisters(self, registers):
        return _roypy.ICameraDevicePtr_writeRegisters(self, registers)

    def readRegisters(self, registers):
        return _roypy.ICameraDevicePtr_readRegisters(self, registers)

    def shiftLensCenter(self, tx, ty):
        return _roypy.ICameraDevicePtr_shiftLensCenter(self, tx, ty)

    def getLensCenter(self):
        return _roypy.ICameraDevicePtr_getLensCenter(self)
ICameraDevicePtr_swigregister = _roypy.ICameraDevicePtr_swigregister
ICameraDevicePtr_swigregister(ICameraDevicePtr)

class CamInfoMap(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CamInfoMap, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CamInfoMap, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _roypy.CamInfoMap_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _roypy.CamInfoMap___nonzero__(self)

    def __bool__(self):
        return _roypy.CamInfoMap___bool__(self)

    def __len__(self):
        return _roypy.CamInfoMap___len__(self)

    def __getslice__(self, i, j):
        return _roypy.CamInfoMap___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _roypy.CamInfoMap___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _roypy.CamInfoMap___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _roypy.CamInfoMap___delitem__(self, *args)

    def __getitem__(self, *args):
        return _roypy.CamInfoMap___getitem__(self, *args)

    def __setitem__(self, *args):
        return _roypy.CamInfoMap___setitem__(self, *args)

    def pop(self):
        return _roypy.CamInfoMap_pop(self)

    def append(self, x):
        return _roypy.CamInfoMap_append(self, x)

    def empty(self):
        return _roypy.CamInfoMap_empty(self)

    def size(self):
        return _roypy.CamInfoMap_size(self)

    def swap(self, v):
        return _roypy.CamInfoMap_swap(self, v)

    def begin(self):
        return _roypy.CamInfoMap_begin(self)

    def end(self):
        return _roypy.CamInfoMap_end(self)

    def rbegin(self):
        return _roypy.CamInfoMap_rbegin(self)

    def rend(self):
        return _roypy.CamInfoMap_rend(self)

    def clear(self):
        return _roypy.CamInfoMap_clear(self)

    def get_allocator(self):
        return _roypy.CamInfoMap_get_allocator(self)

    def pop_back(self):
        return _roypy.CamInfoMap_pop_back(self)

    def erase(self, *args):
        return _roypy.CamInfoMap_erase(self, *args)

    def __init__(self, *args):
        this = _roypy.new_CamInfoMap(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _roypy.CamInfoMap_push_back(self, x)

    def front(self):
        return _roypy.CamInfoMap_front(self)

    def back(self):
        return _roypy.CamInfoMap_back(self)

    def assign(self, n, x):
        return _roypy.CamInfoMap_assign(self, n, x)

    def resize(self, *args):
        return _roypy.CamInfoMap_resize(self, *args)

    def insert(self, *args):
        return _roypy.CamInfoMap_insert(self, *args)

    def reserve(self, n):
        return _roypy.CamInfoMap_reserve(self, n)

    def capacity(self):
        return _roypy.CamInfoMap_capacity(self)
    __swig_destroy__ = _roypy.delete_CamInfoMap
    __del__ = lambda self: None
CamInfoMap_swigregister = _roypy.CamInfoMap_swigregister
CamInfoMap_swigregister(CamInfoMap)

class exposurePair(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, exposurePair, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, exposurePair, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _roypy.new_exposurePair(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["first"] = _roypy.exposurePair_first_set
    __swig_getmethods__["first"] = _roypy.exposurePair_first_get
    if _newclass:
        first = _swig_property(_roypy.exposurePair_first_get, _roypy.exposurePair_first_set)
    __swig_setmethods__["second"] = _roypy.exposurePair_second_set
    __swig_getmethods__["second"] = _roypy.exposurePair_second_get
    if _newclass:
        second = _swig_property(_roypy.exposurePair_second_get, _roypy.exposurePair_second_set)
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _roypy.delete_exposurePair
    __del__ = lambda self: None
exposurePair_swigregister = _roypy.exposurePair_swigregister
exposurePair_swigregister(exposurePair)


def getVersion():
    return _roypy.getVersion()
getVersion = _roypy.getVersion

def getErrorString(status):
    return _roypy.getErrorString(status)
getErrorString = _roypy.getErrorString
class CameraManager(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CameraManager, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CameraManager, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _roypy.new_CameraManager(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _roypy.delete_CameraManager
    __del__ = lambda self: None
    if _newclass:
        getAccessLevel = staticmethod(_roypy.CameraManager_getAccessLevel)
    else:
        getAccessLevel = _roypy.CameraManager_getAccessLevel

    def getConnectedCameraList(self):
        return _roypy.CameraManager_getConnectedCameraList(self)

    def createCamera(self, *args):
        return _roypy.CameraManager_createCamera(self, *args)

    def getConnectedCameraNames(self):
        return _roypy.CameraManager_getConnectedCameraNames(self)

    def registerEventListener(self, listener):
        return _roypy.CameraManager_registerEventListener(self, listener)

    def unregisterEventListener(self):
        return _roypy.CameraManager_unregisterEventListener(self)
CameraManager_swigregister = _roypy.CameraManager_swigregister
CameraManager_swigregister(CameraManager)

def CameraManager_getAccessLevel(*args):
    return _roypy.CameraManager_getAccessLevel(*args)
CameraManager_getAccessLevel = _roypy.CameraManager_getAccessLevel

class ICameraDevice(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ICameraDevice, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ICameraDevice, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _roypy.delete_ICameraDevice
    __del__ = lambda self: None

    def getId(self):
        return _roypy.ICameraDevice_getId(self)

    def getCameraName(self):
        return _roypy.ICameraDevice_getCameraName(self)

    def setUseCase(self, name):
        return _roypy.ICameraDevice_setUseCase(self, name)

    def getUseCases(self):
        return _roypy.ICameraDevice_getUseCases(self)

    def getStreams(self):
        return _roypy.ICameraDevice_getStreams(self)

    def getCurrentUseCase(self):
        return _roypy.ICameraDevice_getCurrentUseCase(self)

    def setExposureMode(self, exposureMode, streamId=0):
        return _roypy.ICameraDevice_setExposureMode(self, exposureMode, streamId)

    def getExposureMode(self, streamId=0):
        return _roypy.ICameraDevice_getExposureMode(self, streamId)

    def registerDataListener(self, listener):
        return _roypy.ICameraDevice_registerDataListener(self, listener)

    def unregisterDataListener(self):
        return _roypy.ICameraDevice_unregisterDataListener(self)

    def registerDepthImageListener(self, listener):
        return _roypy.ICameraDevice_registerDepthImageListener(self, listener)

    def unregisterDepthImageListener(self):
        return _roypy.ICameraDevice_unregisterDepthImageListener(self)

    def registerSparsePointCloudListener(self, listener):
        return _roypy.ICameraDevice_registerSparsePointCloudListener(self, listener)

    def unregisterSparsePointCloudListener(self):
        return _roypy.ICameraDevice_unregisterSparsePointCloudListener(self)

    def registerIRImageListener(self, listener):
        return _roypy.ICameraDevice_registerIRImageListener(self, listener)

    def unregisterIRImageListener(self):
        return _roypy.ICameraDevice_unregisterIRImageListener(self)

    def registerEventListener(self, listener):
        return _roypy.ICameraDevice_registerEventListener(self, listener)

    def unregisterEventListener(self):
        return _roypy.ICameraDevice_unregisterEventListener(self)

    def startCapture(self):
        return _roypy.ICameraDevice_startCapture(self)

    def stopCapture(self):
        return _roypy.ICameraDevice_stopCapture(self)

    def getMaxSensorWidth(self):
        return _roypy.ICameraDevice_getMaxSensorWidth(self)

    def getMaxSensorHeight(self):
        return _roypy.ICameraDevice_getMaxSensorHeight(self)

    def getLensParameters(self, param):
        return _roypy.ICameraDevice_getLensParameters(self, param)

    def isConnected(self):
        return _roypy.ICameraDevice_isConnected(self)

    def isCalibrated(self):
        return _roypy.ICameraDevice_isCalibrated(self)

    def isCapturing(self):
        return _roypy.ICameraDevice_isCapturing(self)

    def getAccessLevel(self):
        return _roypy.ICameraDevice_getAccessLevel(self)

    def startRecording(self, fileName, numberOfFrames=0, frameSkip=0, msSkip=0):
        return _roypy.ICameraDevice_startRecording(self, fileName, numberOfFrames, frameSkip, msSkip)

    def stopRecording(self):
        return _roypy.ICameraDevice_stopRecording(self)

    def registerRecordListener(self, listener):
        return _roypy.ICameraDevice_registerRecordListener(self, listener)

    def unregisterRecordListener(self):
        return _roypy.ICameraDevice_unregisterRecordListener(self)

    def registerExposureListener(self, *args):
        return _roypy.ICameraDevice_registerExposureListener(self, *args)

    def unregisterExposureListener(self):
        return _roypy.ICameraDevice_unregisterExposureListener(self)

    def setFrameRate(self, framerate):
        return _roypy.ICameraDevice_setFrameRate(self, framerate)

    def getFrameRate(self):
        return _roypy.ICameraDevice_getFrameRate(self)

    def getMaxFrameRate(self):
        return _roypy.ICameraDevice_getMaxFrameRate(self)

    def setExternalTrigger(self, useExternalTrigger):
        return _roypy.ICameraDevice_setExternalTrigger(self, useExternalTrigger)

    def setFilterLevel(self, level, streamId=0):
        return _roypy.ICameraDevice_setFilterLevel(self, level, streamId)

    def getFilterLevel(self, streamId=0):
        return _roypy.ICameraDevice_getFilterLevel(self, streamId)

    def getExposureGroups(self):
        return _roypy.ICameraDevice_getExposureGroups(self)

    def setExposureTime(self, *args):
        return _roypy.ICameraDevice_setExposureTime(self, *args)

    def setExposureTimes(self, exposureTimes, streamId=0):
        return _roypy.ICameraDevice_setExposureTimes(self, exposureTimes, streamId)

    def setExposureForGroups(self, exposureTimes):
        return _roypy.ICameraDevice_setExposureForGroups(self, exposureTimes)

    def setProcessingParameters(self, parameters, streamId=0):
        return _roypy.ICameraDevice_setProcessingParameters(self, parameters, streamId)

    def getProcessingParameters(self, streamId=0):
        return _roypy.ICameraDevice_getProcessingParameters(self, streamId)

    def registerDataListenerExtended(self, listener):
        return _roypy.ICameraDevice_registerDataListenerExtended(self, listener)

    def unregisterDataListenerExtended(self):
        return _roypy.ICameraDevice_unregisterDataListenerExtended(self)

    def setCallbackData(self, *args):
        return _roypy.ICameraDevice_setCallbackData(self, *args)

    def setCalibrationData(self, *args):
        return _roypy.ICameraDevice_setCalibrationData(self, *args)

    def getCalibrationData(self, data):
        return _roypy.ICameraDevice_getCalibrationData(self, data)

    def writeCalibrationToFlash(self):
        return _roypy.ICameraDevice_writeCalibrationToFlash(self)

    def writeDataToFlash(self, *args):
        return _roypy.ICameraDevice_writeDataToFlash(self, *args)

    def setDutyCycle(self, dutyCycle, index):
        return _roypy.ICameraDevice_setDutyCycle(self, dutyCycle, index)

    def writeRegisters(self, registers):
        return _roypy.ICameraDevice_writeRegisters(self, registers)

    def readRegisters(self, registers):
        return _roypy.ICameraDevice_readRegisters(self, registers)

    def shiftLensCenter(self, tx, ty):
        return _roypy.ICameraDevice_shiftLensCenter(self, tx, ty)

    def getLensCenter(self):
        return _roypy.ICameraDevice_getLensCenter(self)

    def initialize(self, *args):
        return _roypy.ICameraDevice_initialize(self, *args)

    def getCameraInfo(self, *args):
        return _roypy.ICameraDevice_getCameraInfo(self, *args)

    def getNumberOfStreams(self, *args):
        return _roypy.ICameraDevice_getNumberOfStreams(self, *args)

    def getExposureLimits(self, *args):
        return _roypy.ICameraDevice_getExposureLimits(self, *args)
ICameraDevice_swigregister = _roypy.ICameraDevice_swigregister
ICameraDevice_swigregister(ICameraDevice)

CameraStatus_SUCCESS = _roypy.CameraStatus_SUCCESS
CameraStatus_RUNTIME_ERROR = _roypy.CameraStatus_RUNTIME_ERROR
CameraStatus_DISCONNECTED = _roypy.CameraStatus_DISCONNECTED
CameraStatus_INVALID_VALUE = _roypy.CameraStatus_INVALID_VALUE
CameraStatus_TIMEOUT = _roypy.CameraStatus_TIMEOUT
CameraStatus_LOGIC_ERROR = _roypy.CameraStatus_LOGIC_ERROR
CameraStatus_NOT_IMPLEMENTED = _roypy.CameraStatus_NOT_IMPLEMENTED
CameraStatus_OUT_OF_BOUNDS = _roypy.CameraStatus_OUT_OF_BOUNDS
CameraStatus_RESOURCE_ERROR = _roypy.CameraStatus_RESOURCE_ERROR
CameraStatus_FILE_NOT_FOUND = _roypy.CameraStatus_FILE_NOT_FOUND
CameraStatus_COULD_NOT_OPEN = _roypy.CameraStatus_COULD_NOT_OPEN
CameraStatus_DATA_NOT_FOUND = _roypy.CameraStatus_DATA_NOT_FOUND
CameraStatus_DEVICE_IS_BUSY = _roypy.CameraStatus_DEVICE_IS_BUSY
CameraStatus_WRONG_DATA_FORMAT_FOUND = _roypy.CameraStatus_WRONG_DATA_FORMAT_FOUND
CameraStatus_USECASE_NOT_SUPPORTED = _roypy.CameraStatus_USECASE_NOT_SUPPORTED
CameraStatus_FRAMERATE_NOT_SUPPORTED = _roypy.CameraStatus_FRAMERATE_NOT_SUPPORTED
CameraStatus_EXPOSURE_TIME_NOT_SUPPORTED = _roypy.CameraStatus_EXPOSURE_TIME_NOT_SUPPORTED
CameraStatus_DEVICE_NOT_INITIALIZED = _roypy.CameraStatus_DEVICE_NOT_INITIALIZED
CameraStatus_CALIBRATION_DATA_ERROR = _roypy.CameraStatus_CALIBRATION_DATA_ERROR
CameraStatus_INSUFFICIENT_PRIVILEGES = _roypy.CameraStatus_INSUFFICIENT_PRIVILEGES
CameraStatus_DEVICE_ALREADY_INITIALIZED = _roypy.CameraStatus_DEVICE_ALREADY_INITIALIZED
CameraStatus_EXPOSURE_MODE_INVALID = _roypy.CameraStatus_EXPOSURE_MODE_INVALID
CameraStatus_NO_CALIBRATION_DATA = _roypy.CameraStatus_NO_CALIBRATION_DATA
CameraStatus_INSUFFICIENT_BANDWIDTH = _roypy.CameraStatus_INSUFFICIENT_BANDWIDTH
CameraStatus_DUTYCYCLE_NOT_SUPPORTED = _roypy.CameraStatus_DUTYCYCLE_NOT_SUPPORTED
CameraStatus_SPECTRE_NOT_INITIALIZED = _roypy.CameraStatus_SPECTRE_NOT_INITIALIZED
CameraStatus_NO_USE_CASES = _roypy.CameraStatus_NO_USE_CASES
CameraStatus_NO_USE_CASES_FOR_LEVEL = _roypy.CameraStatus_NO_USE_CASES_FOR_LEVEL
CameraStatus_FSM_INVALID_TRANSITION = _roypy.CameraStatus_FSM_INVALID_TRANSITION
CameraStatus_UNKNOWN = _roypy.CameraStatus_UNKNOWN

def getStatusString(status):
    return _roypy.getStatusString(status)
getStatusString = _roypy.getStatusString

def __lshift__(os, status):
    return _roypy.__lshift__(os, status)
__lshift__ = _roypy.__lshift__
CameraAccessLevel_L1 = _roypy.CameraAccessLevel_L1
CameraAccessLevel_L2 = _roypy.CameraAccessLevel_L2
CameraAccessLevel_L3 = _roypy.CameraAccessLevel_L3
CameraAccessLevel_L4 = _roypy.CameraAccessLevel_L4
class IDepthDataListener(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IDepthDataListener, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IDepthDataListener, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _roypy.delete_IDepthDataListener
    __del__ = lambda self: None

    def onNewData(self, data):
        return _roypy.IDepthDataListener_onNewData(self, data)

    def __init__(self):
        if self.__class__ == IDepthDataListener:
            _self = None
        else:
            _self = self
        this = _roypy.new_IDepthDataListener(_self, )
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    def __disown__(self):
        self.this.disown()
        _roypy.disown_IDepthDataListener(self)
        return weakref_proxy(self)
IDepthDataListener_swigregister = _roypy.IDepthDataListener_swigregister
IDepthDataListener_swigregister(IDepthDataListener)

class IExtendedData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IExtendedData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IExtendedData, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _roypy.delete_IExtendedData
    __del__ = lambda self: None

    def hasDepthData(self):
        return _roypy.IExtendedData_hasDepthData(self)

    def hasRawData(self):
        return _roypy.IExtendedData_hasRawData(self)

    def hasIntermediateData(self):
        return _roypy.IExtendedData_hasIntermediateData(self)

    def getRawData(self):
        return _roypy.IExtendedData_getRawData(self)

    def getDepthData(self):
        return _roypy.IExtendedData_getDepthData(self)

    def getIntermediateData(self):
        return _roypy.IExtendedData_getIntermediateData(self)
IExtendedData_swigregister = _roypy.IExtendedData_swigregister
IExtendedData_swigregister(IExtendedData)

class RawData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RawData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RawData, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _roypy.new_RawData(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["timeStamp"] = _roypy.RawData_timeStamp_set
    __swig_getmethods__["timeStamp"] = _roypy.RawData_timeStamp_get
    if _newclass:
        timeStamp = _swig_property(_roypy.RawData_timeStamp_get, _roypy.RawData_timeStamp_set)
    __swig_setmethods__["streamId"] = _roypy.RawData_streamId_set
    __swig_getmethods__["streamId"] = _roypy.RawData_streamId_get
    if _newclass:
        streamId = _swig_property(_roypy.RawData_streamId_get, _roypy.RawData_streamId_set)
    __swig_setmethods__["width"] = _roypy.RawData_width_set
    __swig_getmethods__["width"] = _roypy.RawData_width_get
    if _newclass:
        width = _swig_property(_roypy.RawData_width_get, _roypy.RawData_width_set)
    __swig_setmethods__["height"] = _roypy.RawData_height_set
    __swig_getmethods__["height"] = _roypy.RawData_height_get
    if _newclass:
        height = _swig_property(_roypy.RawData_height_get, _roypy.RawData_height_set)
    __swig_setmethods__["exposureGroupNames"] = _roypy.RawData_exposureGroupNames_set
    __swig_getmethods__["exposureGroupNames"] = _roypy.RawData_exposureGroupNames_get
    if _newclass:
        exposureGroupNames = _swig_property(_roypy.RawData_exposureGroupNames_get, _roypy.RawData_exposureGroupNames_set)
    __swig_setmethods__["rawFrameCount"] = _roypy.RawData_rawFrameCount_set
    __swig_getmethods__["rawFrameCount"] = _roypy.RawData_rawFrameCount_get
    if _newclass:
        rawFrameCount = _swig_property(_roypy.RawData_rawFrameCount_get, _roypy.RawData_rawFrameCount_set)
    __swig_setmethods__["modulationFrequencies"] = _roypy.RawData_modulationFrequencies_set
    __swig_getmethods__["modulationFrequencies"] = _roypy.RawData_modulationFrequencies_get
    if _newclass:
        modulationFrequencies = _swig_property(_roypy.RawData_modulationFrequencies_get, _roypy.RawData_modulationFrequencies_set)
    __swig_setmethods__["exposureTimes"] = _roypy.RawData_exposureTimes_set
    __swig_getmethods__["exposureTimes"] = _roypy.RawData_exposureTimes_get
    if _newclass:
        exposureTimes = _swig_property(_roypy.RawData_exposureTimes_get, _roypy.RawData_exposureTimes_set)
    __swig_setmethods__["illuminationTemperature"] = _roypy.RawData_illuminationTemperature_set
    __swig_getmethods__["illuminationTemperature"] = _roypy.RawData_illuminationTemperature_get
    if _newclass:
        illuminationTemperature = _swig_property(_roypy.RawData_illuminationTemperature_get, _roypy.RawData_illuminationTemperature_set)
    __swig_setmethods__["phaseAngles"] = _roypy.RawData_phaseAngles_set
    __swig_getmethods__["phaseAngles"] = _roypy.RawData_phaseAngles_get
    if _newclass:
        phaseAngles = _swig_property(_roypy.RawData_phaseAngles_get, _roypy.RawData_phaseAngles_set)
    __swig_setmethods__["illuminationEnabled"] = _roypy.RawData_illuminationEnabled_set
    __swig_getmethods__["illuminationEnabled"] = _roypy.RawData_illuminationEnabled_get
    if _newclass:
        illuminationEnabled = _swig_property(_roypy.RawData_illuminationEnabled_get, _roypy.RawData_illuminationEnabled_set)

    def getRawPhase(self, idx):
        return _roypy.RawData_getRawPhase(self, idx)
    __swig_destroy__ = _roypy.delete_RawData
    __del__ = lambda self: None
RawData_swigregister = _roypy.RawData_swigregister
RawData_swigregister(RawData)

class IntermediatePoint(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntermediatePoint, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntermediatePoint, name)
    __repr__ = _swig_repr
    __swig_setmethods__["distance"] = _roypy.IntermediatePoint_distance_set
    __swig_getmethods__["distance"] = _roypy.IntermediatePoint_distance_get
    if _newclass:
        distance = _swig_property(_roypy.IntermediatePoint_distance_get, _roypy.IntermediatePoint_distance_set)
    __swig_setmethods__["amplitude"] = _roypy.IntermediatePoint_amplitude_set
    __swig_getmethods__["amplitude"] = _roypy.IntermediatePoint_amplitude_get
    if _newclass:
        amplitude = _swig_property(_roypy.IntermediatePoint_amplitude_get, _roypy.IntermediatePoint_amplitude_set)
    __swig_setmethods__["intensity"] = _roypy.IntermediatePoint_intensity_set
    __swig_getmethods__["intensity"] = _roypy.IntermediatePoint_intensity_get
    if _newclass:
        intensity = _swig_property(_roypy.IntermediatePoint_intensity_get, _roypy.IntermediatePoint_intensity_set)
    __swig_setmethods__["flags"] = _roypy.IntermediatePoint_flags_set
    __swig_getmethods__["flags"] = _roypy.IntermediatePoint_flags_get
    if _newclass:
        flags = _swig_property(_roypy.IntermediatePoint_flags_get, _roypy.IntermediatePoint_flags_set)

    def __init__(self):
        this = _roypy.new_IntermediatePoint()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _roypy.delete_IntermediatePoint
    __del__ = lambda self: None
IntermediatePoint_swigregister = _roypy.IntermediatePoint_swigregister
IntermediatePoint_swigregister(IntermediatePoint)

class IntermediateData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntermediateData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntermediateData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["version"] = _roypy.IntermediateData_version_set
    __swig_getmethods__["version"] = _roypy.IntermediateData_version_get
    if _newclass:
        version = _swig_property(_roypy.IntermediateData_version_get, _roypy.IntermediateData_version_set)
    __swig_setmethods__["timeStamp"] = _roypy.IntermediateData_timeStamp_set
    __swig_getmethods__["timeStamp"] = _roypy.IntermediateData_timeStamp_get
    if _newclass:
        timeStamp = _swig_property(_roypy.IntermediateData_timeStamp_get, _roypy.IntermediateData_timeStamp_set)
    __swig_setmethods__["streamId"] = _roypy.IntermediateData_streamId_set
    __swig_getmethods__["streamId"] = _roypy.IntermediateData_streamId_get
    if _newclass:
        streamId = _swig_property(_roypy.IntermediateData_streamId_get, _roypy.IntermediateData_streamId_set)
    __swig_setmethods__["width"] = _roypy.IntermediateData_width_set
    __swig_getmethods__["width"] = _roypy.IntermediateData_width_get
    if _newclass:
        width = _swig_property(_roypy.IntermediateData_width_get, _roypy.IntermediateData_width_set)
    __swig_setmethods__["height"] = _roypy.IntermediateData_height_set
    __swig_getmethods__["height"] = _roypy.IntermediateData_height_get
    if _newclass:
        height = _swig_property(_roypy.IntermediateData_height_get, _roypy.IntermediateData_height_set)
    __swig_setmethods__["points"] = _roypy.IntermediateData_points_set
    __swig_getmethods__["points"] = _roypy.IntermediateData_points_get
    if _newclass:
        points = _swig_property(_roypy.IntermediateData_points_get, _roypy.IntermediateData_points_set)
    __swig_setmethods__["modulationFrequencies"] = _roypy.IntermediateData_modulationFrequencies_set
    __swig_getmethods__["modulationFrequencies"] = _roypy.IntermediateData_modulationFrequencies_get
    if _newclass:
        modulationFrequencies = _swig_property(_roypy.IntermediateData_modulationFrequencies_get, _roypy.IntermediateData_modulationFrequencies_set)
    __swig_setmethods__["exposureTimes"] = _roypy.IntermediateData_exposureTimes_set
    __swig_getmethods__["exposureTimes"] = _roypy.IntermediateData_exposureTimes_get
    if _newclass:
        exposureTimes = _swig_property(_roypy.IntermediateData_exposureTimes_get, _roypy.IntermediateData_exposureTimes_set)
    __swig_setmethods__["numFrequencies"] = _roypy.IntermediateData_numFrequencies_set
    __swig_getmethods__["numFrequencies"] = _roypy.IntermediateData_numFrequencies_get
    if _newclass:
        numFrequencies = _swig_property(_roypy.IntermediateData_numFrequencies_get, _roypy.IntermediateData_numFrequencies_set)

    def __init__(self):
        this = _roypy.new_IntermediateData()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _roypy.delete_IntermediateData
    __del__ = lambda self: None
IntermediateData_swigregister = _roypy.IntermediateData_swigregister
IntermediateData_swigregister(IntermediateData)

class IExtendedDataListener(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IExtendedDataListener, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IExtendedDataListener, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _roypy.delete_IExtendedDataListener
    __del__ = lambda self: None

    def onNewData(self, data):
        return _roypy.IExtendedDataListener_onNewData(self, data)

    def __init__(self):
        if self.__class__ == IExtendedDataListener:
            _self = None
        else:
            _self = self
        this = _roypy.new_IExtendedDataListener(_self, )
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    def __disown__(self):
        self.this.disown()
        _roypy.disown_IExtendedDataListener(self)
        return weakref_proxy(self)
IExtendedDataListener_swigregister = _roypy.IExtendedDataListener_swigregister
IExtendedDataListener_swigregister(IExtendedDataListener)

class IRecordStopListener(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IRecordStopListener, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IRecordStopListener, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _roypy.delete_IRecordStopListener
    __del__ = lambda self: None

    def onRecordingStopped(self, numFrames):
        return _roypy.IRecordStopListener_onRecordingStopped(self, numFrames)

    def __init__(self):
        if self.__class__ == IRecordStopListener:
            _self = None
        else:
            _self = self
        this = _roypy.new_IRecordStopListener(_self, )
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    def __disown__(self):
        self.this.disown()
        _roypy.disown_IRecordStopListener(self)
        return weakref_proxy(self)
IRecordStopListener_swigregister = _roypy.IRecordStopListener_swigregister
IRecordStopListener_swigregister(IRecordStopListener)

class DepthPoint(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DepthPoint, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DepthPoint, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _roypy.DepthPoint_x_set
    __swig_getmethods__["x"] = _roypy.DepthPoint_x_get
    if _newclass:
        x = _swig_property(_roypy.DepthPoint_x_get, _roypy.DepthPoint_x_set)
    __swig_setmethods__["y"] = _roypy.DepthPoint_y_set
    __swig_getmethods__["y"] = _roypy.DepthPoint_y_get
    if _newclass:
        y = _swig_property(_roypy.DepthPoint_y_get, _roypy.DepthPoint_y_set)
    __swig_setmethods__["z"] = _roypy.DepthPoint_z_set
    __swig_getmethods__["z"] = _roypy.DepthPoint_z_get
    if _newclass:
        z = _swig_property(_roypy.DepthPoint_z_get, _roypy.DepthPoint_z_set)
    __swig_setmethods__["noise"] = _roypy.DepthPoint_noise_set
    __swig_getmethods__["noise"] = _roypy.DepthPoint_noise_get
    if _newclass:
        noise = _swig_property(_roypy.DepthPoint_noise_get, _roypy.DepthPoint_noise_set)
    __swig_setmethods__["grayValue"] = _roypy.DepthPoint_grayValue_set
    __swig_getmethods__["grayValue"] = _roypy.DepthPoint_grayValue_get
    if _newclass:
        grayValue = _swig_property(_roypy.DepthPoint_grayValue_get, _roypy.DepthPoint_grayValue_set)
    __swig_setmethods__["depthConfidence"] = _roypy.DepthPoint_depthConfidence_set
    __swig_getmethods__["depthConfidence"] = _roypy.DepthPoint_depthConfidence_get
    if _newclass:
        depthConfidence = _swig_property(_roypy.DepthPoint_depthConfidence_get, _roypy.DepthPoint_depthConfidence_set)

    def __init__(self):
        this = _roypy.new_DepthPoint()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _roypy.delete_DepthPoint
    __del__ = lambda self: None
DepthPoint_swigregister = _roypy.DepthPoint_swigregister
DepthPoint_swigregister(DepthPoint)

class DepthData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DepthData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DepthData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["version"] = _roypy.DepthData_version_set
    __swig_getmethods__["version"] = _roypy.DepthData_version_get
    if _newclass:
        version = _swig_property(_roypy.DepthData_version_get, _roypy.DepthData_version_set)
    __swig_setmethods__["timeStamp"] = _roypy.DepthData_timeStamp_set
    __swig_getmethods__["timeStamp"] = _roypy.DepthData_timeStamp_get
    if _newclass:
        timeStamp = _swig_property(_roypy.DepthData_timeStamp_get, _roypy.DepthData_timeStamp_set)
    __swig_setmethods__["streamId"] = _roypy.DepthData_streamId_set
    __swig_getmethods__["streamId"] = _roypy.DepthData_streamId_get
    if _newclass:
        streamId = _swig_property(_roypy.DepthData_streamId_get, _roypy.DepthData_streamId_set)
    __swig_setmethods__["width"] = _roypy.DepthData_width_set
    __swig_getmethods__["width"] = _roypy.DepthData_width_get
    if _newclass:
        width = _swig_property(_roypy.DepthData_width_get, _roypy.DepthData_width_set)
    __swig_setmethods__["height"] = _roypy.DepthData_height_set
    __swig_getmethods__["height"] = _roypy.DepthData_height_get
    if _newclass:
        height = _swig_property(_roypy.DepthData_height_get, _roypy.DepthData_height_set)
    __swig_setmethods__["exposureTimes"] = _roypy.DepthData_exposureTimes_set
    __swig_getmethods__["exposureTimes"] = _roypy.DepthData_exposureTimes_get
    if _newclass:
        exposureTimes = _swig_property(_roypy.DepthData_exposureTimes_get, _roypy.DepthData_exposureTimes_set)

    def points(self):
        return _roypy.DepthData_points(self)

    def getX(self, idx):
        return _roypy.DepthData_getX(self, idx)

    def getY(self, idx):
        return _roypy.DepthData_getY(self, idx)

    def getZ(self, idx):
        return _roypy.DepthData_getZ(self, idx)

    def getNoise(self, idx):
        return _roypy.DepthData_getNoise(self, idx)

    def getGrayValue(self, idx):
        return _roypy.DepthData_getGrayValue(self, idx)

    def getDepthConfidence(self, idx):
        return _roypy.DepthData_getDepthConfidence(self, idx)

    def getNumPoints(self):
        return _roypy.DepthData_getNumPoints(self)

    def __init__(self):
        this = _roypy.new_DepthData()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _roypy.delete_DepthData
    __del__ = lambda self: None
DepthData_swigregister = _roypy.DepthData_swigregister
DepthData_swigregister(DepthData)

ProcessingFlag_ConsistencyTolerance_Float = _roypy.ProcessingFlag_ConsistencyTolerance_Float
ProcessingFlag_FlyingPixelsF0_Float = _roypy.ProcessingFlag_FlyingPixelsF0_Float
ProcessingFlag_FlyingPixelsF1_Float = _roypy.ProcessingFlag_FlyingPixelsF1_Float
ProcessingFlag_FlyingPixelsFarDist_Float = _roypy.ProcessingFlag_FlyingPixelsFarDist_Float
ProcessingFlag_FlyingPixelsNearDist_Float = _roypy.ProcessingFlag_FlyingPixelsNearDist_Float
ProcessingFlag_LowerSaturationThreshold_Int = _roypy.ProcessingFlag_LowerSaturationThreshold_Int
ProcessingFlag_UpperSaturationThreshold_Int = _roypy.ProcessingFlag_UpperSaturationThreshold_Int
ProcessingFlag_MPIAmpThreshold_Float = _roypy.ProcessingFlag_MPIAmpThreshold_Float
ProcessingFlag_MPIDistThreshold_Float = _roypy.ProcessingFlag_MPIDistThreshold_Float
ProcessingFlag_MPINoiseDistance_Float = _roypy.ProcessingFlag_MPINoiseDistance_Float
ProcessingFlag_NoiseThreshold_Float = _roypy.ProcessingFlag_NoiseThreshold_Float
ProcessingFlag_AdaptiveNoiseFilterType_Int = _roypy.ProcessingFlag_AdaptiveNoiseFilterType_Int
ProcessingFlag_AutoExposureRefAmplitude_Float = _roypy.ProcessingFlag_AutoExposureRefAmplitude_Float
ProcessingFlag_UseAdaptiveNoiseFilter_Bool = _roypy.ProcessingFlag_UseAdaptiveNoiseFilter_Bool
ProcessingFlag_UseAutoExposure_Bool = _roypy.ProcessingFlag_UseAutoExposure_Bool
ProcessingFlag_UseRemoveFlyingPixel_Bool = _roypy.ProcessingFlag_UseRemoveFlyingPixel_Bool
ProcessingFlag_UseMPIFlagAverage_Bool = _roypy.ProcessingFlag_UseMPIFlagAverage_Bool
ProcessingFlag_UseMPIFlag_Amp_Bool = _roypy.ProcessingFlag_UseMPIFlag_Amp_Bool
ProcessingFlag_UseMPIFlag_Dist_Bool = _roypy.ProcessingFlag_UseMPIFlag_Dist_Bool
ProcessingFlag_UseValidateImage_Bool = _roypy.ProcessingFlag_UseValidateImage_Bool
ProcessingFlag_UseRemoveStrayLight_Bool = _roypy.ProcessingFlag_UseRemoveStrayLight_Bool
ProcessingFlag_UseSparsePointCloud_Bool = _roypy.ProcessingFlag_UseSparsePointCloud_Bool
ProcessingFlag_UseFilter2Freq_Bool = _roypy.ProcessingFlag_UseFilter2Freq_Bool
ProcessingFlag_GlobalBinning_Int = _roypy.ProcessingFlag_GlobalBinning_Int
ProcessingFlag_UseAdaptiveBinning_Bool = _roypy.ProcessingFlag_UseAdaptiveBinning_Bool
ProcessingFlag_AutoExposureRefValue_Float = _roypy.ProcessingFlag_AutoExposureRefValue_Float
ProcessingFlag_UseSmoothingFilter_Bool = _roypy.ProcessingFlag_UseSmoothingFilter_Bool
ProcessingFlag_SmoothingAlpha_Float = _roypy.ProcessingFlag_SmoothingAlpha_Float
ProcessingFlag_SmoothingFilterType_Int = _roypy.ProcessingFlag_SmoothingFilterType_Int
ProcessingFlag_UseFlagSBI_Bool = _roypy.ProcessingFlag_UseFlagSBI_Bool
ProcessingFlag_UseHoleFilling_Bool = _roypy.ProcessingFlag_UseHoleFilling_Bool
ProcessingFlag_NUM_FLAGS = _roypy.ProcessingFlag_NUM_FLAGS

def getProcessingFlagName(mode):
    return _roypy.getProcessingFlagName(mode)
getProcessingFlagName = _roypy.getProcessingFlagName

def parseProcessingFlagName(modeName, processingFlag):
    return _roypy.parseProcessingFlagName(modeName, processingFlag)
parseProcessingFlagName = _roypy.parseProcessingFlagName
ExposureMode_MANUAL = _roypy.ExposureMode_MANUAL
ExposureMode_AUTOMATIC = _roypy.ExposureMode_AUTOMATIC
FilterLevel_Off = _roypy.FilterLevel_Off
FilterLevel_Legacy = _roypy.FilterLevel_Legacy
FilterLevel_Full = _roypy.FilterLevel_Full
FilterLevel_Custom = _roypy.FilterLevel_Custom
# This file is compatible with both classic and new-style classes.


